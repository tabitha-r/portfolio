@use './colours' as *;

// Light and dark theme collections
$themes: (
    light: (
        browser-bg: $browser-bg-light,
        browser-tab: $browser-tab-light,
        browser-input: $browser-input-light,
        browser-menu: $browser-menu-light,
        browser-font: $browser-font-light,
        browser-shadow: $browser-shadow-light,
        browser-highlight: $browser-highlight-light,
        browser-green: $browser-green-button-light,
        browser-amber: $browser-amber-button-light,
        browser-red: $browser-red-button-light,
        contrast-light: $light-contrast-light,
        contrast-mid: $light-contrast-mid,
        contrast-dark: $light-contrast-dark,
        app-bg: $app-bg-light,
        app-fg1: $app-fg1-light,
        app-fg2: $app-fg2-light,
        app-fg3: $app-fg3-light,
        app-shadow: $app-shadow-light,
        app-highlight: $app-highlight-light,
        app-font-primary: $app-font-primary-light,
        app-font-secondary: $app-font-secondary-light,
        app-contrast-secondary: $app-secondary-contrast-light
    ),
    dark: (
        browser-bg: $browser-bg-dark,
        browser-tab: $browser-tab-dark,
        browser-input: $browser-input-dark,
        browser-menu: $browser-menu-dark,
        browser-font: $browser-font-dark,
        browser-shadow: $browser-shadow-dark,
        browser-highlight: $browser-highlight-dark,
        browser-green: $browser-green-button-dark,
        browser-amber: $browser-amber-button-dark,
        browser-red: $browser-red-button-dark,
        contrast-light: $dark-contrast-light,
        contrast-mid: $dark-contrast-mid,
        contrast-dark: $dark-contrast-dark,
        app-bg: $app-bg-dark,
        app-fg1: $app-fg1-dark,
        app-fg2: $app-fg2-dark,
        app-fg3: $app-fg3-dark,
        app-shadow: $app-shadow-dark,
        app-highlight: $app-highlight-dark,
        app-font-primary: $app-font-primary-dark,
        app-font-secondary: $app-font-secondary-dark,
        app-contrast-secondary: $app-secondary-contrast-dark
    )
);

// Mixin maps over the above theme and applies depending on active theme
// Active theme is determined through .theme--{theme} class on body
// Use by @include themed() on selector
// Within mixin use t(variable-name) to use relevant colour
@mixin themed() {
    @each $theme, $map in $themes {
      .theme--#{$theme} & {
        $theme-map: () !global;
        @each $key, $submap in $map {
          $value: map-get(map-get($themes, $theme), '#{$key}');
          $theme-map: map-merge($theme-map, ($key: $value)) !global;
        }
        @content;
        $theme-map: null !global;
      }
    }
  }
  
  @function t($key) {
    @return map-get($theme-map, $key);
  }